package cwst.com;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoField;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import cwst.com.entities.CwstCaseDetail;
import cwst.com.entities.CwstSendmail;
import cwst.com.services.CrdDetailService;
import cwst.com.services.CwstCaseDetailService;
import cwst.com.services.CwstSendmailService;
import cwst.com.services.CwstSentmailService;

@Configuration
@EnableScheduling
@EnableAsync
public class CwSupportToolConfig {

	@Autowired
	private CwstCaseDetailService cwstCaseDetailService;
	@Autowired
	private CrdDetailService crdDetailService;
	@Autowired
	private JavaMailSender javaMailSender;
	@Autowired
	private CwstSendmailService cwstSendmailService;
	@Autowired
	private CwstSentmailService cwstSentmailService;
	private static final Logger LOGGER = LoggerFactory.getLogger(CwSupportToolConfig.class);

	private static final List<String> CASE_STATUS = Arrays.asList("DECLINED", "CANCELED", "ROUTED", "NEW");
	private static final List<String> CASE_REMIND = Arrays.asList("REMIND");

	@Value("${cwst.scandata.enable}")
	private Boolean cwstScandataEnable;

	@Value("${cwst.getnewestdata.enable}")
	private Boolean cwstGetNewestEnable;

	@Value("${cwst.sendmailer.enable}")
	private Boolean cwstSendmailerEnable;

	@Value("${cwst.sendmail8houreveryday.enable}")
	private Boolean cwstSendmail8HourEveryDayEnable;

	@Value("${cwst.sendmail5days.enable}")
	private Boolean cwstSendMail5DaysEnable;

	// Kiem tra trang thai cua case neu "DECLINED", "CANCELED" thi se bo qua
	@Scheduled(cron = "${cwst.scandata}")
	private void scanData() {
		if (cwstScandataEnable) {
			try {
				cwstCaseDetailService.scanData();
			} catch (Exception ex) {
				LOGGER.error("scanData() - Message: " + ex.getMessage());

			}
		}
	}

	// Quet du lieu moi, 10s
	@Scheduled(cron = "${cwst.getnewestdata}")
	private void getNewestData() {
		if (cwstGetNewestEnable) {
			try {
				cwstCaseDetailService.getNewestData();
			} catch (Exception ex) {
				LOGGER.error("getNewestData() - Message: " + ex.getMessage());

			}

		}
	}

	// Gui mail moi 20s
	@Scheduled(cron = "${cwst.sendmailer}")
	private void sendMailer() {
		if (cwstSendmailerEnable) {
			cwstSendmailService.findAllByMailtypeIn(CASE_STATUS).forEach(s -> {
				sendMail(s.getMailto(), s.getMailcontent(), s.getMailtitle());
				if (CASE_STATUS.contains(s.getMailtype())) {
					try {
						cwstSentmailService.save(s.getCaseId(), s.getMailtype(), s.getMailcontent());
						cwstSendmailService.delete(s.getCaseId(), s.getMailtype());
					} catch (Exception e) {
						LOGGER.error("sendMailer() - Message: " + e.getMessage());
					}
				}
			});
		}
	}

	// Gui mail 8h moi ngay case duoc remind cho cardworks support tool
	@Scheduled(cron = "${cwst.sendmail8houreveryday}")
	private void sendMail8HourEveryDay() {
		if (cwstSendmail8HourEveryDayEnable) {
			final DateFormat format = new SimpleDateFormat("yyyyMMdd");
			final Date today = Calendar.getInstance().getTime();
			final String sFormat = format.format(today) + "000000000";

			List<CwstSendmail> result = cwstSendmailService.findAllByMailtypeIn(CASE_REMIND).stream()
					.filter(s -> s.getCreTms() < Long.parseLong(sFormat)).collect(Collectors.toList());
			result.forEach(s -> {
				final CwstCaseDetail cwstCaseDetail = cwstCaseDetailService.findOneByIdCaseId(s.getCaseId());
			//@formatter:off
			final String sEmailContent = String.format(
					"Creation User: %s <br/>" + 
				    "Creation Time: %s <br/>" + 
					"Customer Name: %s <br/>" + 
				    "CIF: %s <br/>" + 
					"Case Type: %s <br/>"+ 
				    "Description:%s <br/>" + 
					"Result: %s <br/>" + 
				    "Content: %s",
		    // @formatter:on
						cwstCaseDetail.getCreUser(), cwstCaseDetail.getCreTms(), cwstCaseDetail.getCustName(), cwstCaseDetail.getCif(),
						cwstCaseDetail.getCaseType(), cwstCaseDetail.getDescription(), cwstCaseDetail.getCaseResult(), s.getMailcontent());
				sendMail(s.getMailto(), sEmailContent, s.getMailtitle());
				if (CASE_REMIND.contains(s.getMailtype())) {
					cwstSentmailService.save(s.getCaseId(), s.getMailtype(), s.getMailcontent());
					cwstSendmailService.delete(s.getCaseId(), s.getMailtype());
				}
			});
		}
	}

	// Gui mail sau 5 ngay da gui the ve don vi nhung don vi khong xac nhan (Quan ly phan phoi the)
	@Scheduled(cron = "${cwst.sendmail5days}")
	private void sendMail5Days() {
		if (cwstSendMail5DaysEnable) {
			final List<Object[]> list = crdDetailService.findToSendMailDistributingCard();
			final String workingDate = crdDetailService.findWorkingDate();
			final TimeConverter timeConverter = new TimeConverter();
			if (!workingDate.isEmpty()) {
				int n = LocalDate.now().get(ChronoField.DAY_OF_YEAR);// Lay ngay trong nam
				if (workingDate.substring(n - 1, n).equals("N")) {
					list.forEach(s -> {
						final String sCif = String.valueOf(s[0]);
						final String sCustName = String.valueOf(s[1]);
						final String sPrinSupp = String.valueOf(s[2]);
						final String sCrdType = String.valueOf(s[3]);
						final String sIssueDate = timeConverter.convertStrToDateTime(String.valueOf(s[4]));
						final String sPan = String.valueOf(s[5]);
						final String sBrchCde = String.valueOf(s[6]);
						final String sIssueType = String.valueOf(s[7]);

			//@formatter:off
		    final StringBuilder sEmailContent=new StringBuilder("<p>Đơn vị chưa xác nhận đã nhận thẻ</p>"
		    		+ "<table border='1' style='width:100%'><tr><th>Số Cif</th><th>Tên Khách hàng</th><th>Chính/Phụ</th><th>Loại Thẻ</th><th>Ngày Phát Hành</th><th>Loại Phát Hành</th><th>Số Thẻ</th><th>Mã đơn vị</th></tr>"
		    		+ "<tr><td>"+sCif+"</td><td>"+sCustName+"</td><td>"+sPrinSupp+"</td><td>"+sCrdType+"</td><td>"+sIssueDate+"</td><td>"+sIssueType+"</td><td>"+sPan+"</td><td>"+sBrchCde+"</td></tr></table>"
		    		+ "<p style='color:red'>Đây là email tự động vui lòng không phản hồi</p>");		
			// @formatter:on
						sendMail(String.valueOf(s[0]), sEmailContent.toString(), "Quản Lý Phân Phối Thẻ");
						cwstSentmailService.save(sCif, "DISTCARD", sEmailContent.toString());
					});
				}
			} else {
				LOGGER.error("Khong tim thay du lieu working date");
			}
		}
	}

	private void sendMail(final String address, final String content, final String subject) {
		if (address != null && !address.isEmpty()) {
			MimeMessage mail = javaMailSender.createMimeMessage();
			try {
				MimeMessageHelper helper = new MimeMessageHelper(mail);
				// address String to String []
				// helper.setTo(address.split(","));
				helper.setTo("chautk@scb.com.vn");
				helper.setFrom(new InternetAddress("cardworks_support@scb.com.vn"));
				helper.setReplyTo(new InternetAddress("cardworks_support@scb.com.vn"));
				helper.setSubject(subject);
				helper.setText(content, true);
				javaMailSender.send(mail);
				LOGGER.info("Send mail to: " + address + " - subject: " + subject);
			} catch (MessagingException e) {
				LOGGER.error("Send mail error: " + e.getMessage() + " - Send mail to: - " + address + "|subject:" + subject);
			}
		}
	}
}